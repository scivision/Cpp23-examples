name: cmake

on:
  push:
    paths:
      - "**.cpp"
      - "**.ixx"
      - "**.cmake"
      - "**/CMakeLists.txt"
      - ".github/workflows/cmake.yml"
  workflow_dispatch:

# avoid wasted runs
concurrency:
  group: ${{ github.workflow }}-${{ github.ref }}
  cancel-in-progress: true

env:
  CTEST_NO_TESTS_ACTION: error
  CTEST_PARALLEL_LEVEL: 0
  HOMEBREW_NO_AUTO_UPDATE: 1


jobs:

  gcc-new:
    runs-on: ubuntu-latest
    timeout-minutes: 5

    strategy:
      matrix:
        cxx: [g++-12, g++-13, g++-14, clang++-18]

    env:
      CXX: ${{ matrix.cxx }}

    steps:
    - &checkout
      uses: actions/checkout@v5

    - &debug
      run: cmake --workflow debug

    - &release
      run: cmake --workflow release

    - &features
      uses: actions/upload-artifact@v4
      if: success()
      with:
        name: ${{ runner.os }}-${{ matrix.cxx }}_features.json
        path: build/features.json


  gcc-old:
    runs-on: ubuntu-22.04
    timeout-minutes: 5

    strategy:
      matrix:
        cxx: [g++-9, g++-10, g++-11]

    env:
      CXX: ${{ matrix.cxx }}

    steps:
    - *checkout

    - *debug

    - *release

    - *features


  mac:
    runs-on: macos-latest
    timeout-minutes: 5

    env:
      CXX: ${{ matrix.cxx }}

    strategy:
      matrix:
        cxx: [clang++, g++-15]

    steps:
    - name: Latest Xcode needed for GCC
      if: startsWith(matrix.cxx, 'g++')
      run: sudo xcode-select --switch /Library/Developer/CommandLineTools
# This comes into play when GA is pinned to an old Xcode b/c Homebrew builds against latest
# Every say year or two this becomes an issue.
# https://github.com/Homebrew/homebrew-core/issues/228131

    - *checkout

    - *debug

    - *release

    - *features


  windows-msvc:
    runs-on: windows-latest
    timeout-minutes: 10

    strategy:
      matrix:
        cxx: [msvc]

    steps:
    - *checkout

    - run: cmake --workflow msvc

    - *features


  windows-gcc:
    runs-on: windows-latest
    timeout-minutes: 10

    strategy:
      matrix:
        cxx: [g++]

    steps:
    - uses: msys2/setup-msys2@v2
      id: msys2
      with:
        update: true
        install: >-
          mingw-w64-ucrt-x86_64-gcc
# need GCC install to get latest G++

    - name: Put MSYS2_MinGW64 on PATH
      run: echo "${{ steps.msys2.outputs.msys2-location }}/ucrt64/bin" | Out-File -FilePath $env:GITHUB_PATH -Encoding utf8 -Append

    - *checkout

    - *debug

    - *release

    - *features

    - name: upload CMakeConfigureLog.yaml
      if: failure()
      uses: actions/upload-artifact@v4
      with:
        name: ${{ runner.os }}-CMakeConfigureLog.yaml
        path: build/CMakeFiles/CMakeConfigureLog.yaml
